// <auto-generated />
namespace Microsoft.Data.Entity.Relational.Design
{
    using System.Diagnostics;
    using System.Globalization;
    using System.Reflection;
    using System.Resources;
	using JetBrains.Annotations;

    public static class Strings
    {
        private static readonly ResourceManager _resourceManager
            = new ResourceManager("EntityFramework.Relational.Design.Strings", typeof(Strings).GetTypeInfo().Assembly);

        /// <summary>
        /// ConnectionString is required to generate code.
        /// </summary>
        public static string ConnectionStringRequired
        {
            get { return GetString("ConnectionStringRequired"); }
        }

        /// <summary>
        /// At line {lineNumber}. Message: {message}
        /// </summary>
        public static string ErrorMessageWithLineNumber([CanBeNull] object lineNumber, [CanBeNull] object message)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("ErrorMessageWithLineNumber", "lineNumber", "message"), lineNumber, message);
        }

        /// <summary>
        /// There was an error running the DbContext template. Message: {errorMessage}
        /// </summary>
        public static string ErrorRunningDbContextTemplate([CanBeNull] object errorMessage)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("ErrorRunningDbContextTemplate", "errorMessage"), errorMessage);
        }

        /// <summary>
        /// There was an error running the EntityType template. Message: {errorMessage}
        /// </summary>
        public static string ErrorRunningEntityTypeTemplate([CanBeNull] object errorMessage)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("ErrorRunningEntityTypeTemplate", "errorMessage"), errorMessage);
        }

        /// <summary>
        /// Unable to use the output path, {outputPath}. It must be a relative path which is a sub-directory of the project directory {projectPath}.
        /// </summary>
        public static string NotRelativePath([CanBeNull] object outputPath, [CanBeNull] object projectPath)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("NotRelativePath", "outputPath", "projectPath"), outputPath, projectPath);
        }

        /// <summary>
        /// ProjectPath is required to generate code.
        /// </summary>
        public static string ProjectPathRequired
        {
            get { return GetString("ProjectPathRequired"); }
        }

        /// <summary>
        /// Provider is required to generate code.
        /// </summary>
        public static string ProviderRequired
        {
            get { return GetString("ProviderRequired"); }
        }

        /// <summary>
        /// Metadata model returned should not be null. Provider: {providerTypeName} , connection string: {connectionString}.
        /// </summary>
        public static string ProviderReturnedNullModel([CanBeNull] object providerTypeName, [CanBeNull] object connectionString)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("ProviderReturnedNullModel", "providerTypeName", "connectionString"), providerTypeName, connectionString);
        }

        /// <summary>
        /// No files generated in directory {outputDirectoryName}. The following file(s) already exist and must be made writeable to continue: {readOnlyFiles}.
        /// </summary>
        public static string ReadOnlyFiles([CanBeNull] object outputDirectoryName, [CanBeNull] object readOnlyFiles)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("ReadOnlyFiles", "outputDirectoryName", "readOnlyFiles"), outputDirectoryName, readOnlyFiles);
        }

        /// <summary>
        /// Root namespace of the project is required to generate code.
        /// </summary>
        public static string RootNamespaceRequired
        {
            get { return GetString("RootNamespaceRequired"); }
        }

        /// <summary>
        /// Template Processing Failed: {errorMessages}
        /// </summary>
        public static string TemplateProcessingFailed([CanBeNull] object errorMessages)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("TemplateProcessingFailed", "errorMessages"), errorMessages);
        }

        /// <summary>
        /// Unable to add a Navigation Property referencing type {referencedEntityTypeName} because of errors generating that EntityType.
        /// </summary>
        public static string UnableToAddNavigationProperty([CanBeNull] object referencedEntityTypeName)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("UnableToAddNavigationProperty", "referencedEntityTypeName"), referencedEntityTypeName);
        }

        /// <summary>
        /// Unable to create metadata reference from name {metadataReferenceName}.
        /// </summary>
        public static string UnableToCreateMetadataReference([CanBeNull] object metadataReferenceName)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("UnableToCreateMetadataReference", "metadataReferenceName"), metadataReferenceName);
        }

        /// <summary>
        /// Unable to generate EntityType {entityTypeName}. {errorMessage}
        /// </summary>
        public static string UnableToGenerateEntityType([CanBeNull] object entityTypeName, [CanBeNull] object errorMessage)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("UnableToGenerateEntityType", "entityTypeName", "errorMessage"), entityTypeName, errorMessage);
        }

        /// <summary>
        /// Using custom template {customTemplateFilePath}
        /// </summary>
        public static string UsingCustomTemplate([CanBeNull] object customTemplateFilePath)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("UsingCustomTemplate", "customTemplateFilePath"), customTemplateFilePath);
        }

        private static string GetString(string name, params string[] formatterNames)
        {
            var value = _resourceManager.GetString(name);

            Debug.Assert(value != null);

            if (formatterNames != null)
            {
                for (var i = 0; i < formatterNames.Length; i++)
                {
                    value = value.Replace("{" + formatterNames[i] + "}", "{" + i + "}");
                }
            }

            return value;
        }
    }
}
